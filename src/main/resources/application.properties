# JPA
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create-drop

server.port=8075
spring.jpa.hibernate.ddl-auto=update

#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/learn_english
spring.datasource.username=root
spring.datasource.password=12345

spring.jpa.show-sql=true

#spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
#<property name="hibernate.format_sql" value="true"/>


jwt.token.secret=jwtvocabulary
jwt.token.expired=3600000


#spring.datasource.url=jdbc:mysql://localhost:3306/jwtappdemo?serverTimezone=UTC
#
#spring.datasource.username=root
#spring.datasource.password=root

#spring.liquibase.change-log=classpath:liquibase/db.changelog-master.xml
#spring.liquibase.url=jdbc:mysql://localhost:3306/learn_english
#spring.liquibase.user=root
#spring.liquibase.password=12345






#spring.datasource.url=jdbc:mysql://localhost:3306/test
#spring.datasource.username=
#spring.datasource.password =
#spring.datasource.testWhileIdle=true
#spring.datasource.validationQuery=SELECT 1
#spring.jpa.show-sql=true

#spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect




#spring.jackson.date-format - it may be needed
#server.port=8081
#server.port=${port:8282} This expression means that if you pass the --port argument, it takes that value; if
#not, its set to 8282.
#You can have Tomcat with SSL by using the following properties.
#server.port=8443
#server.ssl.key-store=classpath:keystore.jks
#server.ssl.key-store-password=secret
#server.ssl.key-password=secret
#We revisit these properties and make our app work with SSL in a later chapter.
#You can manage a session by using the following properties.
#server.servlet.session.store-dir=/tmp
#server.servlet.session.persistent=true
#server.servlet.session.timeout=15
#server.servlet.session.cookie.name=todo-cookie.dat
#server.servlet.session.cookie.path=/tmp/cookies
#You can enable HTTP/2 support if your environment supports it.
#server.http2.enabled=true
#spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
#spring.jackson.time-zone=MST7MDT

#@Component
#@ConfigurationProperties(prefix="todo")
#@Data
#public class ToDoRestClientProperties {
#private String url;
#private String basePath;
#}
#Listing 4-16 shows the class that holds the information about the URL and the
#basePath. Spring Boot allows you to create custom-typed properties that can be accessed
#and mapped from the application.properties file; the only requirement is that you
#need to mark the class with the @ConfigurationProperties annotation. This annotation
#can accept parameters like prefix.
#In the application.properties file, add the following content.
#todo.url=http://localhost:8080
#todo.base-path=/api/todo